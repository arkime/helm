# -- Overrides the chart's name.
nameOverride: ""
# -- Overrides the chart's computed fullname.
fullnameOverride: ""

# -- Create a service account for all pods to use
serviceAccount:
  create: true
  name: "" # Defaults to <fullname>-<component> if not set
  annotations: {}
  # -- Whether to automount API credentials for the Service Account
  automountServiceAccountToken: false

# -- Create a Self-Signed CA with an Issuer. This is not recommended for production use.
selfSignedCA: false

# -- Ingress/Route settings
ingress: # Ingress for Kubernetes, Route for OpenShift
  enabled: true
  # For OpenShift, set to 'route' to create Route resources instead of Ingress
  # For Kubernetes, typically 'ingress'
  type: ingress # or 'route'
  additionalAnnotations: {}
    # cert-manager.io/cluster-issuer: arkime-self-signed-ca # Example for cert-manager with Ingress
    # route.openshift.io/termination: "edge" # Example for OpenShift Route
  ingressClassName: "nginx" # Only used if type is 'ingress'
  # -- Hosts are used to populate the TLS cert SANs (for Ingress) or host field (for Route)
  # host: arkime.example.com
  tls: # Common TLS settings for Ingress and Route
    # enabled: true # Enable TLS
    # secretName: arkime-tls-secret # Name of the k8s secret that contains TLS cert and key
    # For Ingress, this secret is referenced directly.
    # For OpenShift Routes, you might need to specify key, certificate, caCertificate if not using a pre-existing secret.
    # key: |-
    #   -----BEGIN PRIVATE KEY-----
    #   ...
    #   -----END PRIVATE KEY-----
    # certificate: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # caCertificate: |- # Optional, for mutual TLS or custom CA
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    insecureEdgeTerminationPolicy: Redirect # For OpenShift Route: None, Allow, Redirect

# -- Arkime Configuration (config.ini)
configMap:  
  # -- Create a ConfigMap with Arkime configuration (config.ini)
  create: true
  # -- If create: true, this is the name of the arkime-configmap. If false, this is the name of an existing arkime configmap you have created.
  name: "" # Defaults to <fullname>-config if not set
  # -- Arkime configuration (config.ini)
  config: |
    [default]
    rotateIndex=daily
    # Add other default Arkime configurations here

# -- Global envs that apply to all pods
env:
  # -- The OpenSearch/Elasticsearch URL - https://arkime.com/settings#elasticsearch
  - name: ARKIME__elasticsearch
    value: "https://arkime-opensearch:9200"
    # value: "http://host.docker.internal:9200"

  # -- user:pass for OpenSearch/Elasticsearch - https://arkime.com/settings#elasticsearchBasicAuth
  - name: ARKIME__elasticsearchBasicAuth
    valueFrom:
      secretKeyRef:
        name: arkime-elasticsearch-basic-auth
        key: elasticsearchBasicAuth

  # -- secret string - https://arkime.com/settings#serverSecret
  - name: ARKIME__serverSecret
    valueFrom:
      secretKeyRef:
        name: arkime-server-secret
        key: serverSecret
        optional: true

  # -- password secret string - https://arkime.com/settings#passwordSecret
  - name: ARKIME__passwordSecret
    valueFrom:
      secretKeyRef:
        name: arkime-password-secret
        key: passwordSecret
        optional: true
  
  # -- Debug level for applications - https://arkime.com/settings#debug
  - name: ARKIME__debug
    value: "0"

  # -- WISE - https://arkime.com/settings#wise
  - name : ARKIME__plugins
    value: "wise.so"
  - name : ARKIME__wiseURL
    value: "http://arkime-wise.arkime.svc.cluster.local:8081"
  - name : ARKIME_centralViewer__plugins
    value: "wise.js"

# -- Global image settings. Arkime uses the same image for all components. 
image: 
  repository: ghcr.io/arkime/arkime/arkime
  tag: v5-latest
  # tag: v5-ja4-latest
  # -- Global image pull policy for container images.
  pullPolicy: Always
# -- Global image pull secrets for container images.
imagePullSecrets: []

# -- bootstrap is a job that inits the OpenSearch / ElasticSearch database
bootstrap:
  enabled: true # Explicitly enable bootstrap job, can be set to false if db is already initialized
  env: []
  envFrom: []
  resources:
    requests:
      cpu: 100m
      memory: 128Mi # Increased memory for bootstrap job
    limits:
      cpu: 200m
      memory: 256Mi
  # -- Additional volumeMounts for the controller pod.
  extraVolumeMounts: []
  # -- Additional volumes for the controller pod.
  extraVolumes: []
  nodeSelector:
    kubernetes.io/os: linux
  # -- Additional labels to add into metadata.
  additionalLabels: {}
  # -- Additional annotations to add into metadata.
  additionalAnnotations: {}
  # -- Tolerations to allow the pod to be scheduled to nodes with taints.
  tolerations: []
  # -- Specify which Kubernetes scheduler should dispatch the pod.
  schedulerName: default-scheduler
  # -- Configure the DNS Policy for the pod
  dnsPolicy: ClusterFirst
  # -- Configure DNS Config for the pod
  dnsConfig: {}
  #  options:
  #    - name: ndots
  #      value: "1"

# -- capture component configuration
capture:
  enabled: true
  # -- hostPath where pcap files are stored.
  # For OpenShift, this directory needs appropriate permissions or use a PersistentVolumeClaim.
  pcapPath: /pcap
  nodeSelector:
    kubernetes.io/os: linux
    # -- Add this label to the node to restrict capture to specific nodes
    # arkime-capture: "true"
  additionalLabels: {}
  additionalAnnotations: {}
  tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
  schedulerName: default-scheduler
  dnsPolicy: ClusterFirst
  dnsConfig: {}
  # hostNetwork is often required for capture to access network interfaces directly.
  # Ensure this is acceptable in your OpenShift environment and SCCs are configured.
  hostNetwork: true
  podSecurityContext: {} # Adjusted for OpenShift, will run as root due to hostNetwork and capture needs
  command: ["/bin/sh", "-c", "/opt/arkime/bin/docker.sh capture --insecure --host ${POD_IP} --node ${NODE_NAME}"]
  env:
    - name: ARKIME__interface
      value: "eth0" # Adjust this to your primary network interface for capture
    - name: ARKIME__pcapReadMethod
      value: tpacketv3
  envFrom: []
  resources:
    requests:
      cpu: 500m # Increased CPU for capture
      memory: 512Mi # Increased memory for capture
    limits:
      cpu: "1"
      memory: "1Gi"
  extraVolumeMounts: []
  extraVolumes: []

# -- viewer component configuration (can be run as part of sensor or standalone central viewer)
viewer:
  enabled: true # This flag is for the viewer run alongside capture (formerly part of sensor)
  # If centralViewer.enabled is true, this specific viewer might be redundant unless needed on each capture node.
  # Consider disabling this if centralViewer is the primary UI.
  command: ["/bin/sh", "-c", "/opt/arkime/bin/docker.sh viewer --insecure --host ${POD_IP} --node ${NODE_NAME}"]
  env: []
  envFrom: []
  resources:
    requests:
      cpu: 200m # Adjusted resources
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  extraVolumeMounts: []
  ports:
    - containerPort: 8005 # Default Arkime viewer port
      name: viewer-port

# -- centralViewer is a deployment for a standalone, centralized viewer UI
centralViewer:
  enabled: true
  replicas: 1 # Adjusted default replicas
  command: ["/opt/arkime/bin/docker.sh", "viewer", "--insecure", "-n", "centralViewer"]
  env:
    - name: ARKIME_valueDASHactions__cont3xt
      value: "url:/cont3xt/?q=%TEXT%;name:Query Cont3xt;category:ip,host,user,md5,sha256"
  envFrom: []
  resources:
    requests:
      cpu: 200m
      memory: 512Mi # Increased memory for central viewer
  # -- Additional volumeMounts for the controller pod.
  extraVolumeMounts: []
  # -- Additional volumes for the centralViewer pod.
  extraVolumes: []
  nodeSelector: {}
  # -- Additional labels to add into metadata.
  additionalLabels: {}
  # -- Additional annotations to add into metadata.
  additionalAnnotations: {}
  # -- Additional route specific annotations to add into metadata
  routeAnnotations: {}

  # -- Tolerations to allow the pod to be scheduled to nodes with taints.
  tolerations: []
  # -- Specify which Kubernetes scheduler should dispatch the pod.
  schedulerName: default-scheduler
  # -- Configure the DNS Policy for the pod
  dnsPolicy: ClusterFirst
  # -- Configure DNS Config for the pod
  dnsConfig: {}
  #  options:
  #    - name: ndots
  #      value: "1"
  ports:
    - containerPort: 8005
      name: central-viewer
  service:
    ports:
      - name: arkime-central-viewer
        protocol: TCP
        port: 8005
        targetPort: central-viewer
  podDisruptionBudget:
    # -- The mimimum number of pods that must be available at any given time. Only one of minAvailable or maxUnavailable can be set.
    minAvailable: 1
    # -- The maximum number of pods that can be unavailable at any given time. Only one of minAvailable or maxUnavailable can be set.
    #maxUnavailable: 0

# -- cont3xt is a deployment
cont3xt:
  enabled: true
  replicas: 1 # Adjusted default replicas
  webBasePath: "/cont3xt/" # Moved from env array for easier access
  command: ["/opt/arkime/bin/docker.sh", "cont3xt", "--insecure"]
  env: # This env section in values.yaml is for default static values if not templated in deployment
    - name: ARKIME_cont3xt__webBasePath
      value: "/cont3xt/" # Static default value
  envFrom: []
  resources:
    requests:
      cpu: 100m
      memory: 512Mi # Increased memory for central viewer
    limits:
      cpu: 500m
      memory: "1Gi"
  # -- Additional volumeMounts for the controller pod.
  extraVolumeMounts: []
  # -- Additional volumes for the cont3xt pod.
  extraVolumes: []
  nodeSelector: {}
  # -- Additional labels to add into metadata.
  additionalLabels: {}
  # -- Additional annotations to add into metadata.
  additionalAnnotations: {}
  # -- Additional route specific annotations to add into metadata
  routeAnnotations: {}

  # -- Tolerations to allow the pod to be scheduled to nodes with taints.
  tolerations: []
  # -- Specify which Kubernetes scheduler should dispatch the pod.
  schedulerName: default-scheduler
  # -- Configure the DNS Policy for the pod
  dnsPolicy: ClusterFirst
  # -- Configure DNS Config for the pod
  dnsConfig: {}
  #  options:
  #    - name: ndots
  #      value: "1"
  ports:
    - containerPort: 3218
      name: cont3xt
  service:
    ports:
      - name: arkime-cont3xt
        protocol: TCP
        port: 3218
        targetPort: cont3xt
  podDisruptionBudget:
    # -- The mimimum number of pods that must be available at any given time. Only one of minAvailable or maxUnavailable can be set.
    minAvailable: 1
    # -- The maximum number of pods that can be unavailable at any given time. Only one of minAvailable or maxUnavailable can be set.
    #maxUnavailable: 0

# -- wise is a deployment
wise:
  enabled: true
  replicas: 1 # Adjusted default replicas
  webBasePath: "/wise/" # Moved from env array for easier access
  command: ["/opt/arkime/bin/docker.sh", "wise", "--", "-c", "elasticsearch://usersElasticsearch/arkime_configs/_doc/wise", "--insecure", "--webconfig", "--webcode", "0000"]
  env: # This env section in values.yaml is for default static values if not templated in deployment
    - name: ARKIME_wiseService__webBasePath
      value: "/wise/" # Static default value
  envFrom: []
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  # -- Additional volumeMounts for the controller pod.
  extraVolumeMounts: []
  # -- Additional volumes for the wise pod.
  extraVolumes: []
  nodeSelector: {}
  # -- Additional labels to add into metadata.
  additionalLabels: {}
  # -- Additional annotations to add into metadata.
  additionalAnnotations: {}
  # -- Additional route specific annotations to add into metadata
  routeAnnotations: {}

  # -- Tolerations to allow the pod to be scheduled to nodes with taints.
  tolerations: []
  # -- Specify which Kubernetes scheduler should dispatch the pod.
  schedulerName: default-scheduler
  # -- Configure the DNS Policy for the pod
  dnsPolicy: ClusterFirst
  # -- Configure DNS Config for the pod
  dnsConfig: {}
  #  options:
  #    - name: ndots
  #      value: "1"
  ports:
    - containerPort: 8081
      name: wise
  service:
    ports:
      - name: arkime-wise
        protocol: TCP
        port: 8081
        targetPort: wise
  podDisruptionBudget:
    # -- The mimimum number of pods that must be available at any given time. Only one of minAvailable or maxUnavailable can be set.
    minAvailable: 1
    # -- The maximum number of pods that can be unavailable at any given time. Only one of minAvailable or maxUnavailable can be set.
    #maxUnavailable: 0

